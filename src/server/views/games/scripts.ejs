<script>
    const gameId = <%- JSON.stringify(gameId) %>;
    console.log("gameId: ", gameId);
    const currentPlayerId = <%- JSON.stringify(currentPlayerId) %>;
    console.log("currentPlayerId: ", currentPlayerId);

  // Show error message dynamically (appears in the center and disappears after 2 seconds)
function showError(message) {
    const errorMessage = document.createElement("div");
    errorMessage.textContent = message;
    errorMessage.className = `
        fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2
        bg-red-600 text-white p-4 rounded-lg shadow-lg text-lg font-bold
        z-20 animate-fade-in
    `;
    document.body.appendChild(errorMessage);

    // Fade out after 3 seconds
    setTimeout(() => {
        errorMessage.style.opacity = "0";
        setTimeout(() => errorMessage.remove(), 500); // Ensure removal after fade-out
    }, 1000);
}

    // Handle Card Click
    document.getElementById("player-cards").addEventListener("click", (e) => {
        const cardElement = e.target.closest(".card");
        if (cardElement) {
            const color = cardElement.dataset.color;
            const value = cardElement.dataset.value;

            // Handle Wild Cards
            if (value === "wild" || value === "wild_draw4") {
                const chosenColor = prompt("Choose a color (red, yellow, green, blue):");
                if (!["red", "yellow", "green", "blue"].includes(chosenColor)) {
                    showError("Invalid color. Please try again.");
                    return;
                }

                fetch(`/games/${gameId}/play-card`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ playerId: currentPlayerId, card: { color: chosenColor, value } })
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        showError(data.message || "Invalid card play.");
                    } else {
                        cardElement.remove();
                    }
                })
                .catch(() => showError("An error occurred while playing the card."));
                return;
            }

            // Play Regular Cards
            fetch(`/games/${gameId}/play-card`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ playerId: currentPlayerId, card: { color, value } })
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    showError(data.message || "Invalid card play.");
                } else {
                    cardElement.remove();
                }
            })
            .catch(() => showError("An error occurred while playing the card."));
        }
    });

    // Handle Draw Card Click
    document.getElementById("draw-card-btn").addEventListener("click", () => {
        fetch(`/games/${gameId}/draw-card`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ playerId: currentPlayerId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log("Card drawn successfully!");
            } else {
                showError(data.message || "Failed to draw card.");
            }
        });
    });

    const socket = io();

    socket.emit("join-game", gameId);

    socket.on("error", (data) => {
        console.error("Received error event:", data);
        if (data.playerId === currentPlayerId) {
            showError(data.message || "You cannot play this card!");
        }
    });

    socket.on("game-state", (updatedState) => {
        console.log("Received updated game state:", updatedState);
        updatePlayerCards(updatedState);
    });

    function updatePlayerCards(gameState) {
        const currentPlayer = gameState.players.find(player => player.id === currentPlayerId);
        const playerCardsContainer = document.getElementById("player-cards");
        playerCardsContainer.innerHTML = "";

        if (currentPlayer) {
            currentPlayer.hand.forEach(card => {
                const cardElement = document.createElement("div");
                const cardText = card.value.includes("wild")
                    ? `Wild ${card.value === "wild_draw4" ? "Draw 4" : ""}`
                    : `${card.color} ${card.value}`;

                cardElement.className = `card ${card.color || "wild"} cursor-pointer`;
                cardElement.dataset.color = card.color || "wild";
                cardElement.dataset.value = card.value;

                cardElement.textContent = cardText;
                playerCardsContainer.appendChild(cardElement);
            });
        } else {
            playerCardsContainer.innerHTML = "<p>No cards available</p>";
        }
    }
</script>

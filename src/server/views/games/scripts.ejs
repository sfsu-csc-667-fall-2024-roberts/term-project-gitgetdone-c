<script>
  const gameId = <%= JSON.stringify(gameId) %>;
  const currentPlayerId = <%= JSON.stringify(currentPlayerId) %>;

    console.log("Game ID:", gameId);
    console.log("Current Player ID:", currentPlayerId);

    const socket = io();

    // Join the game room
    socket.emit("join-game", gameId);

    // Listen for game state updates
    socket.on("game-state", (updatedState) => {
        console.log("Updated game state received:", updatedState);
        updateGameUI(updatedState);
    });

    // Listen for game-over event
    socket.on("game-over", ({ winnerName }) => {
        console.log("Game Over! Winner:", winnerName);

        // Display game-over message
        const gameContainer = document.querySelector(".game-container");
        if (gameContainer) {
            gameContainer.innerHTML = `
                <div class="game-over-message bg-green-500 text-white text-center p-4 rounded-lg">
                    <h2 class="text-2xl font-bold">Game Over!</h2>
                    <p class="text-lg">Congratulations, ${winnerName}, you won the game!</p>
                </div>
            `;
        }
    });

    // Handle errors
    socket.on("error", (data) => {
        console.error("Error:", data);
        alert(data.message || "An unexpected error occurred.");
    });

    // Draw a card
    const drawCardButton = document.getElementById("draw-card-btn");
    if (drawCardButton) {
        drawCardButton.addEventListener("click", () => {
            fetch(`/games/${gameId}/draw-card`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ playerId: currentPlayerId }),
            })
                .then((response) => response.json())
                .then((data) => {
                    if (!data.success) {
                        console.error("Failed to draw card:", data.message);
                        alert(data.message || "Failed to draw a card.");
                    }
                })
                .catch((error) => {
                    console.error("Error drawing card:", error);
                    alert("An error occurred while drawing a card.");
                });
        });
    }

    // Play a card
    const playerCardsContainer = document.getElementById("player-cards");
    if (playerCardsContainer) {
        playerCardsContainer.addEventListener("click", (e) => {
            const cardElement = e.target.closest(".card");
            if (!cardElement) return;

            const color = cardElement.dataset.color;
            const value = cardElement.dataset.value;

            if (["wild", "wild_draw4"].includes(value)) {
                const chosenColor = prompt("Choose a color (red, yellow, green, blue):");
                if (!["red", "yellow", "green", "blue"].includes(chosenColor)) {
                    alert("Invalid color choice.");
                    return;
                }
                playCard({ color: chosenColor, value });
            } else {
                playCard({ color, value });
            }
        });
    }

    function playCard(card) {
        fetch(`/games/${gameId}/play-card`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ playerId: currentPlayerId, card }),
        })
            .then((response) => response.json())
            .then((data) => {
                if (!data.success) {
                    console.error("Invalid card play:", data.message);
                    alert(data.message || "Invalid card play.");
                } else {
                    console.log("Card played successfully.");
                }
            })
            .catch((error) => {
                console.error("Error playing card:", error);
                alert("An error occurred while playing the card.");
            });
    }

    // Update the game UI
    function updateGameUI(gameState) {
        updatePlayerCards(gameState);
        updateOtherPlayers(gameState);
        updateTopCard(gameState);

        const currentPlayerElement = document.getElementById("current-player");
        if (currentPlayerElement) {
            const currentPlayerTurn = gameState.players[gameState.currentTurn]?.username || "Unknown";
            currentPlayerElement.textContent = `It's ${currentPlayerTurn}'s turn!`;
        }
    }

    // Update player's cards
    function updatePlayerCards(gameState) {
        const currentPlayer = gameState.players.find((player) => player.id === currentPlayerId);
        const playerCardsContainer = document.getElementById("player-cards");
        playerCardsContainer.innerHTML = "";

        currentPlayer?.hand.forEach((card) => {
            const cardElement = document.createElement("div");
            cardElement.className = `card ${card.color || "wild"}`;
            cardElement.dataset.color = card.color || "null";
            cardElement.dataset.value = card.value;
            cardElement.textContent = card.value.includes("wild")
                ? `Wild ${card.value === "wild_draw4" ? "Draw 4" : ""}`
                : `${card.color} ${card.value}`;
            playerCardsContainer.appendChild(cardElement);
        });
    }

    // Update other players' information
    function updateOtherPlayers(gameState) {
        const otherPlayersContainer = document.querySelector(".other-players");
        otherPlayersContainer.innerHTML = "";

        gameState.players
            .filter((player) => player.id !== currentPlayerId)
            .forEach((player) => {
                const playerElement = document.createElement("div");
                playerElement.textContent = `${player.username} (${player.hand.length} cards)`;
                otherPlayersContainer.appendChild(playerElement);
            });
    }

    // Update the top card on the discard pile
    function updateTopCard(gameState) {
        const topCardContainer = document.getElementById("top-card");
        const topCard = gameState.discardPile[gameState.discardPile.length - 1];

        if (topCard) {
            topCardContainer.className = `card ${topCard.color || "wild"}`;
            topCardContainer.textContent = topCard.value.includes("wild")
                ? `Wild ${topCard.value === "wild_draw4" ? "Draw 4" : ""}`
                : `${topCard.color} ${topCard.value}`;
        } else {
            topCardContainer.className = "card";
            topCardContainer.textContent = "No Cards";
        }
    }
</script>
